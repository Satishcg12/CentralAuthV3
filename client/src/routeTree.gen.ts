/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TermsImport } from './routes/terms'
import { Route as PrivacyImport } from './routes/privacy'
import { Route as HelpImport } from './routes/help'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated/route'
import { Route as AuthRouteImport } from './routes/_auth/route'
import { Route as IndexImport } from './routes/index'
import { Route as DemoTanstackQueryImport } from './routes/demo.tanstack-query'
import { Route as AuthenticatedSettingImport } from './routes/_authenticated/setting'
import { Route as AuthenticatedDashboardImport } from './routes/_authenticated/dashboard'
import { Route as AuthRegisterImport } from './routes/_auth/register'
import { Route as AuthLoginImport } from './routes/_auth/login'
import { Route as errors503Import } from './routes/(errors)/503'
import { Route as errors500Import } from './routes/(errors)/500'
import { Route as errors404Import } from './routes/(errors)/404'
import { Route as errors403Import } from './routes/(errors)/403'
import { Route as errors401Import } from './routes/(errors)/401'
import { Route as AuthenticatedProfileIndexImport } from './routes/_authenticated/profile/index'
import { Route as AuthenticatedClientsIndexImport } from './routes/_authenticated/clients/index'
import { Route as AuthenticatedClientsRecoverSecretImport } from './routes/_authenticated/clients/recover-secret'
import { Route as AuthenticatedClientsNewImport } from './routes/_authenticated/clients/new'
import { Route as AuthenticatedClientsClientIdImport } from './routes/_authenticated/clients/$clientId'

// Create/Update Routes

const TermsRoute = TermsImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyRoute = PrivacyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any)

const HelpRoute = HelpImport.update({
  id: '/help',
  path: '/help',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRouteRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DemoTanstackQueryRoute = DemoTanstackQueryImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedSettingRoute = AuthenticatedSettingImport.update({
  id: '/setting',
  path: '/setting',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)

const AuthenticatedDashboardRoute = AuthenticatedDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)

const errors503Route = errors503Import.update({
  id: '/(errors)/503',
  path: '/503',
  getParentRoute: () => rootRoute,
} as any)

const errors500Route = errors500Import.update({
  id: '/(errors)/500',
  path: '/500',
  getParentRoute: () => rootRoute,
} as any)

const errors404Route = errors404Import.update({
  id: '/(errors)/404',
  path: '/404',
  getParentRoute: () => rootRoute,
} as any)

const errors403Route = errors403Import.update({
  id: '/(errors)/403',
  path: '/403',
  getParentRoute: () => rootRoute,
} as any)

const errors401Route = errors401Import.update({
  id: '/(errors)/401',
  path: '/401',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedProfileIndexRoute = AuthenticatedProfileIndexImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)

const AuthenticatedClientsIndexRoute = AuthenticatedClientsIndexImport.update({
  id: '/clients/',
  path: '/clients/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)

const AuthenticatedClientsRecoverSecretRoute =
  AuthenticatedClientsRecoverSecretImport.update({
    id: '/clients/recover-secret',
    path: '/clients/recover-secret',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)

const AuthenticatedClientsNewRoute = AuthenticatedClientsNewImport.update({
  id: '/clients/new',
  path: '/clients/new',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)

const AuthenticatedClientsClientIdRoute =
  AuthenticatedClientsClientIdImport.update({
    id: '/clients/$clientId',
    path: '/clients/$clientId',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRoute
    }
    '/help': {
      id: '/help'
      path: '/help'
      fullPath: '/help'
      preLoaderRoute: typeof HelpImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyImport
      parentRoute: typeof rootRoute
    }
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsImport
      parentRoute: typeof rootRoute
    }
    '/(errors)/401': {
      id: '/(errors)/401'
      path: '/401'
      fullPath: '/401'
      preLoaderRoute: typeof errors401Import
      parentRoute: typeof rootRoute
    }
    '/(errors)/403': {
      id: '/(errors)/403'
      path: '/403'
      fullPath: '/403'
      preLoaderRoute: typeof errors403Import
      parentRoute: typeof rootRoute
    }
    '/(errors)/404': {
      id: '/(errors)/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof errors404Import
      parentRoute: typeof rootRoute
    }
    '/(errors)/500': {
      id: '/(errors)/500'
      path: '/500'
      fullPath: '/500'
      preLoaderRoute: typeof errors500Import
      parentRoute: typeof rootRoute
    }
    '/(errors)/503': {
      id: '/(errors)/503'
      path: '/503'
      fullPath: '/503'
      preLoaderRoute: typeof errors503Import
      parentRoute: typeof rootRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/register': {
      id: '/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof AuthRouteImport
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/setting': {
      id: '/_authenticated/setting'
      path: '/setting'
      fullPath: '/setting'
      preLoaderRoute: typeof AuthenticatedSettingImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/clients/$clientId': {
      id: '/_authenticated/clients/$clientId'
      path: '/clients/$clientId'
      fullPath: '/clients/$clientId'
      preLoaderRoute: typeof AuthenticatedClientsClientIdImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/clients/new': {
      id: '/_authenticated/clients/new'
      path: '/clients/new'
      fullPath: '/clients/new'
      preLoaderRoute: typeof AuthenticatedClientsNewImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/clients/recover-secret': {
      id: '/_authenticated/clients/recover-secret'
      path: '/clients/recover-secret'
      fullPath: '/clients/recover-secret'
      preLoaderRoute: typeof AuthenticatedClientsRecoverSecretImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/clients/': {
      id: '/_authenticated/clients/'
      path: '/clients'
      fullPath: '/clients'
      preLoaderRoute: typeof AuthenticatedClientsIndexImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/profile/': {
      id: '/_authenticated/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthenticatedProfileIndexImport
      parentRoute: typeof AuthenticatedRouteImport
    }
  }
}

// Create and export the route tree

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface AuthenticatedRouteRouteChildren {
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
  AuthenticatedSettingRoute: typeof AuthenticatedSettingRoute
  AuthenticatedClientsClientIdRoute: typeof AuthenticatedClientsClientIdRoute
  AuthenticatedClientsNewRoute: typeof AuthenticatedClientsNewRoute
  AuthenticatedClientsRecoverSecretRoute: typeof AuthenticatedClientsRecoverSecretRoute
  AuthenticatedClientsIndexRoute: typeof AuthenticatedClientsIndexRoute
  AuthenticatedProfileIndexRoute: typeof AuthenticatedProfileIndexRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
  AuthenticatedSettingRoute: AuthenticatedSettingRoute,
  AuthenticatedClientsClientIdRoute: AuthenticatedClientsClientIdRoute,
  AuthenticatedClientsNewRoute: AuthenticatedClientsNewRoute,
  AuthenticatedClientsRecoverSecretRoute:
    AuthenticatedClientsRecoverSecretRoute,
  AuthenticatedClientsIndexRoute: AuthenticatedClientsIndexRoute,
  AuthenticatedProfileIndexRoute: AuthenticatedProfileIndexRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteRouteWithChildren
  '/help': typeof HelpRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/401': typeof errors401Route
  '/403': typeof errors403Route
  '/404': typeof errors404Route
  '/500': typeof errors500Route
  '/503': typeof errors503Route
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/setting': typeof AuthenticatedSettingRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/clients/$clientId': typeof AuthenticatedClientsClientIdRoute
  '/clients/new': typeof AuthenticatedClientsNewRoute
  '/clients/recover-secret': typeof AuthenticatedClientsRecoverSecretRoute
  '/clients': typeof AuthenticatedClientsIndexRoute
  '/profile': typeof AuthenticatedProfileIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteRouteWithChildren
  '/help': typeof HelpRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/401': typeof errors401Route
  '/403': typeof errors403Route
  '/404': typeof errors404Route
  '/500': typeof errors500Route
  '/503': typeof errors503Route
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/setting': typeof AuthenticatedSettingRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/clients/$clientId': typeof AuthenticatedClientsClientIdRoute
  '/clients/new': typeof AuthenticatedClientsNewRoute
  '/clients/recover-secret': typeof AuthenticatedClientsRecoverSecretRoute
  '/clients': typeof AuthenticatedClientsIndexRoute
  '/profile': typeof AuthenticatedProfileIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/help': typeof HelpRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/(errors)/401': typeof errors401Route
  '/(errors)/403': typeof errors403Route
  '/(errors)/404': typeof errors404Route
  '/(errors)/500': typeof errors500Route
  '/(errors)/503': typeof errors503Route
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/register': typeof AuthRegisterRoute
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
  '/_authenticated/setting': typeof AuthenticatedSettingRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/_authenticated/clients/$clientId': typeof AuthenticatedClientsClientIdRoute
  '/_authenticated/clients/new': typeof AuthenticatedClientsNewRoute
  '/_authenticated/clients/recover-secret': typeof AuthenticatedClientsRecoverSecretRoute
  '/_authenticated/clients/': typeof AuthenticatedClientsIndexRoute
  '/_authenticated/profile/': typeof AuthenticatedProfileIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/help'
    | '/privacy'
    | '/terms'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/login'
    | '/register'
    | '/dashboard'
    | '/setting'
    | '/demo/tanstack-query'
    | '/clients/$clientId'
    | '/clients/new'
    | '/clients/recover-secret'
    | '/clients'
    | '/profile'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/help'
    | '/privacy'
    | '/terms'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/login'
    | '/register'
    | '/dashboard'
    | '/setting'
    | '/demo/tanstack-query'
    | '/clients/$clientId'
    | '/clients/new'
    | '/clients/recover-secret'
    | '/clients'
    | '/profile'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_authenticated'
    | '/help'
    | '/privacy'
    | '/terms'
    | '/(errors)/401'
    | '/(errors)/403'
    | '/(errors)/404'
    | '/(errors)/500'
    | '/(errors)/503'
    | '/_auth/login'
    | '/_auth/register'
    | '/_authenticated/dashboard'
    | '/_authenticated/setting'
    | '/demo/tanstack-query'
    | '/_authenticated/clients/$clientId'
    | '/_authenticated/clients/new'
    | '/_authenticated/clients/recover-secret'
    | '/_authenticated/clients/'
    | '/_authenticated/profile/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  HelpRoute: typeof HelpRoute
  PrivacyRoute: typeof PrivacyRoute
  TermsRoute: typeof TermsRoute
  errors401Route: typeof errors401Route
  errors403Route: typeof errors403Route
  errors404Route: typeof errors404Route
  errors500Route: typeof errors500Route
  errors503Route: typeof errors503Route
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  HelpRoute: HelpRoute,
  PrivacyRoute: PrivacyRoute,
  TermsRoute: TermsRoute,
  errors401Route: errors401Route,
  errors403Route: errors403Route,
  errors404Route: errors404Route,
  errors500Route: errors500Route,
  errors503Route: errors503Route,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/_authenticated",
        "/help",
        "/privacy",
        "/terms",
        "/(errors)/401",
        "/(errors)/403",
        "/(errors)/404",
        "/(errors)/500",
        "/(errors)/503",
        "/demo/tanstack-query"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/login",
        "/_auth/register"
      ]
    },
    "/_authenticated": {
      "filePath": "_authenticated/route.tsx",
      "children": [
        "/_authenticated/dashboard",
        "/_authenticated/setting",
        "/_authenticated/clients/$clientId",
        "/_authenticated/clients/new",
        "/_authenticated/clients/recover-secret",
        "/_authenticated/clients/",
        "/_authenticated/profile/"
      ]
    },
    "/help": {
      "filePath": "help.tsx"
    },
    "/privacy": {
      "filePath": "privacy.tsx"
    },
    "/terms": {
      "filePath": "terms.tsx"
    },
    "/(errors)/401": {
      "filePath": "(errors)/401.tsx"
    },
    "/(errors)/403": {
      "filePath": "(errors)/403.tsx"
    },
    "/(errors)/404": {
      "filePath": "(errors)/404.tsx"
    },
    "/(errors)/500": {
      "filePath": "(errors)/500.tsx"
    },
    "/(errors)/503": {
      "filePath": "(errors)/503.tsx"
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx",
      "parent": "/_auth"
    },
    "/_auth/register": {
      "filePath": "_auth/register.tsx",
      "parent": "/_auth"
    },
    "/_authenticated/dashboard": {
      "filePath": "_authenticated/dashboard.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/setting": {
      "filePath": "_authenticated/setting.tsx",
      "parent": "/_authenticated"
    },
    "/demo/tanstack-query": {
      "filePath": "demo.tanstack-query.tsx"
    },
    "/_authenticated/clients/$clientId": {
      "filePath": "_authenticated/clients/$clientId.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/clients/new": {
      "filePath": "_authenticated/clients/new.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/clients/recover-secret": {
      "filePath": "_authenticated/clients/recover-secret.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/clients/": {
      "filePath": "_authenticated/clients/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/profile/": {
      "filePath": "_authenticated/profile/index.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
