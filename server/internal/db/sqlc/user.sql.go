// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email,
    password_hash,
    full_name,
    date_of_birth,
    email_verified,
    active,
    role,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
) RETURNING id, email, password_hash, full_name, date_of_birth, email_verified, active, role, created_at, updated_at
`

type CreateUserParams struct {
	Email         string         `json:"email"`
	PasswordHash  string         `json:"password_hash"`
	FullName      string         `json:"full_name"`
	DateOfBirth   sql.NullTime   `json:"date_of_birth"`
	EmailVerified sql.NullBool   `json:"email_verified"`
	Active        sql.NullBool   `json:"active"`
	Role          sql.NullString `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.PasswordHash,
		arg.FullName,
		arg.DateOfBirth,
		arg.EmailVerified,
		arg.Active,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.DateOfBirth,
		&i.EmailVerified,
		&i.Active,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, full_name, date_of_birth, email_verified, active, role, created_at, updated_at 
FROM users
WHERE email = $1 
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.DateOfBirth,
		&i.EmailVerified,
		&i.Active,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
