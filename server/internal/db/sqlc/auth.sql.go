// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: auth.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createAccessToken = `-- name: CreateAccessToken :one
INSERT INTO access_tokens (
    token,
    client_id,
    user_id,
    scope,
    expires_at
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id
`

type CreateAccessTokenParams struct {
	Token     string    `json:"token"`
	ClientID  uuid.UUID `json:"client_id"`
	UserID    uuid.UUID `json:"user_id"`
	Scope     string    `json:"scope"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateAccessToken(ctx context.Context, arg CreateAccessTokenParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createAccessToken,
		arg.Token,
		arg.ClientID,
		arg.UserID,
		arg.Scope,
		arg.ExpiresAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (
    token,
    client_id,
    user_id,
    scope,
    expires_at
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id
`

type CreateRefreshTokenParams struct {
	Token     string    `json:"token"`
	ClientID  uuid.UUID `json:"client_id"`
	UserID    uuid.UUID `json:"user_id"`
	Scope     string    `json:"scope"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken,
		arg.Token,
		arg.ClientID,
		arg.UserID,
		arg.Scope,
		arg.ExpiresAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    user_id,
    ip_address,
    user_agent
) VALUES (
    $1, $2, $3
) RETURNING id
`

type CreateSessionParams struct {
	UserID    uuid.UUID      `json:"user_id"`
	IpAddress sql.NullString `json:"ip_address"`
	UserAgent sql.NullString `json:"user_agent"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.UserID, arg.IpAddress, arg.UserAgent)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteSession = `-- name: DeleteSession :exec
UPDATE sessions
SET expires_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const getAccessToken = `-- name: GetAccessToken :one
SELECT id, token, client_id, user_id, scope, expires_at, created_at FROM access_tokens WHERE token = $1 AND expires_at > CURRENT_TIMESTAMP LIMIT 1
`

func (q *Queries) GetAccessToken(ctx context.Context, token string) (AccessToken, error) {
	row := q.db.QueryRowContext(ctx, getAccessToken, token)
	var i AccessToken
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.ClientID,
		&i.UserID,
		&i.Scope,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT id, token, client_id, user_id, scope, expires_at, created_at FROM refresh_tokens WHERE token = $1 AND expires_at > CURRENT_TIMESTAMP LIMIT 1
`

func (q *Queries) GetRefreshToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.ClientID,
		&i.UserID,
		&i.Scope,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, client_id, ip_address, user_agent, expires_at, created_at FROM sessions WHERE id = $1 AND expires_at > CURRENT_TIMESTAMP LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClientID,
		&i.IpAddress,
		&i.UserAgent,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const invalidateAccessToken = `-- name: InvalidateAccessToken :exec
UPDATE access_tokens
SET expires_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) InvalidateAccessToken(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, invalidateAccessToken, id)
	return err
}

const invalidateRefreshToken = `-- name: InvalidateRefreshToken :exec
UPDATE refresh_tokens
SET expires_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) InvalidateRefreshToken(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, invalidateRefreshToken, id)
	return err
}

const listSessionsByUser = `-- name: ListSessionsByUser :many
SELECT id, user_id, client_id, ip_address, user_agent, expires_at, created_at FROM sessions WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListSessionsByUser(ctx context.Context, userID uuid.UUID) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, listSessionsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Session{}
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ClientID,
			&i.IpAddress,
			&i.UserAgent,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
