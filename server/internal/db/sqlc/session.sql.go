// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: session.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const countActiveUserSessions = `-- name: CountActiveUserSessions :one
SELECT COUNT(*) FROM sessions 
WHERE user_id = $1 
AND is_active = TRUE 
AND expires_at > CURRENT_TIMESTAMP
`

func (q *Queries) CountActiveUserSessions(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countActiveUserSessions, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    user_id,
    session_token,
    user_agent,
    ip_address,
    expires_at
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, user_id, session_token, user_agent, ip_address, created_at, expires_at, is_active
`

type CreateSessionParams struct {
	UserID       uuid.UUID      `json:"user_id"`
	SessionToken string         `json:"session_token"`
	UserAgent    sql.NullString `json:"user_agent"`
	IpAddress    sql.NullString `json:"ip_address"`
	ExpiresAt    time.Time      `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.UserID,
		arg.SessionToken,
		arg.UserAgent,
		arg.IpAddress,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.UserAgent,
		&i.IpAddress,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.IsActive,
	)
	return i, err
}

const deactivateAllUserSessions = `-- name: DeactivateAllUserSessions :exec
UPDATE sessions 
SET is_active = FALSE 
WHERE user_id = $1
`

func (q *Queries) DeactivateAllUserSessions(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deactivateAllUserSessions, userID)
	return err
}

const deactivateSession = `-- name: DeactivateSession :exec
UPDATE sessions 
SET is_active = FALSE 
WHERE session_token = $1
`

func (q *Queries) DeactivateSession(ctx context.Context, sessionToken string) error {
	_, err := q.db.ExecContext(ctx, deactivateSession, sessionToken)
	return err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT id, user_id, session_token, user_agent, ip_address, created_at, expires_at, is_active FROM sessions 
WHERE session_token = $1 
AND is_active = TRUE 
AND expires_at > CURRENT_TIMESTAMP
`

func (q *Queries) GetSessionByToken(ctx context.Context, sessionToken string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByToken, sessionToken)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.UserAgent,
		&i.IpAddress,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.IsActive,
	)
	return i, err
}
