// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, full_name, date_of_birth, email_verified, active, role, created_at, updated_at FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.DateOfBirth,
		&i.EmailVerified,
		&i.Active,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByIdentifier = `-- name: GetUserByIdentifier :one
SELECT id, email, password_hash, full_name, date_of_birth, email_verified, active, role, created_at, updated_at FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByIdentifier(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByIdentifier, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.DateOfBirth,
		&i.EmailVerified,
		&i.Active,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, password_hash, full_name, date_of_birth, email_verified, active, role, created_at, updated_at FROM users
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PasswordHash,
			&i.FullName,
			&i.DateOfBirth,
			&i.EmailVerified,
			&i.Active,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerUser = `-- name: RegisterUser :one
INSERT INTO users (
    email,
    password_hash,
    full_name,
    date_of_birth,
    email_verified,
    role
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, email, password_hash, full_name, date_of_birth, email_verified, active, role, created_at, updated_at
`

type RegisterUserParams struct {
	Email         string         `json:"email"`
	PasswordHash  string         `json:"password_hash"`
	FullName      sql.NullString `json:"full_name"`
	DateOfBirth   sql.NullTime   `json:"date_of_birth"`
	EmailVerified sql.NullBool   `json:"email_verified"`
	Role          sql.NullString `json:"role"`
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, registerUser,
		arg.Email,
		arg.PasswordHash,
		arg.FullName,
		arg.DateOfBirth,
		arg.EmailVerified,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.DateOfBirth,
		&i.EmailVerified,
		&i.Active,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET
    full_name = COALESCE($1, full_name),
    date_of_birth = COALESCE($2, date_of_birth),
    email_verified = COALESCE($3, email_verified),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $4
RETURNING id, email, password_hash, full_name, date_of_birth, email_verified, active, role, created_at, updated_at
`

type UpdateUserParams struct {
	FullName      sql.NullString `json:"full_name"`
	DateOfBirth   sql.NullTime   `json:"date_of_birth"`
	EmailVerified sql.NullBool   `json:"email_verified"`
	ID            uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.FullName,
		arg.DateOfBirth,
		arg.EmailVerified,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.DateOfBirth,
		&i.EmailVerified,
		&i.Active,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
