// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: client.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const countClients = `-- name: CountClients :one
SELECT COUNT(*) FROM clients WHERE is_active = true
`

func (q *Queries) CountClients(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countClients)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createClient = `-- name: CreateClient :one
INSERT INTO clients (
    name,
    description,
    client_id,
    client_secret,
    redirect_uris,
    website_url,
    is_active,
    is_confidential,
    created_by,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
) RETURNING id, name, description, client_id, client_secret, redirect_uris, website_url, is_active, is_confidential, created_by, created_at, updated_at
`

type CreateClientParams struct {
	Name           string         `json:"name"`
	Description    sql.NullString `json:"description"`
	ClientID       string         `json:"client_id"`
	ClientSecret   string         `json:"client_secret"`
	RedirectUris   []string       `json:"redirect_uris"`
	WebsiteUrl     sql.NullString `json:"website_url"`
	IsActive       sql.NullBool   `json:"is_active"`
	IsConfidential sql.NullBool   `json:"is_confidential"`
	CreatedBy      uuid.NullUUID  `json:"created_by"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, createClient,
		arg.Name,
		arg.Description,
		arg.ClientID,
		arg.ClientSecret,
		pq.Array(arg.RedirectUris),
		arg.WebsiteUrl,
		arg.IsActive,
		arg.IsConfidential,
		arg.CreatedBy,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ClientID,
		&i.ClientSecret,
		pq.Array(&i.RedirectUris),
		&i.WebsiteUrl,
		&i.IsActive,
		&i.IsConfidential,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteClient = `-- name: DeleteClient :exec
UPDATE clients
SET 
    is_active = false,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeleteClient(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteClient, id)
	return err
}

const getAllClients = `-- name: GetAllClients :many
SELECT 
    id,
    name,
    description,
    client_id,
    redirect_uris,
    website_url,
    is_active,
    is_confidential,
    created_at,
    updated_at
FROM clients
WHERE is_active = true
ORDER BY created_at DESC
`

type GetAllClientsRow struct {
	ID             uuid.UUID      `json:"id"`
	Name           string         `json:"name"`
	Description    sql.NullString `json:"description"`
	ClientID       string         `json:"client_id"`
	RedirectUris   []string       `json:"redirect_uris"`
	WebsiteUrl     sql.NullString `json:"website_url"`
	IsActive       sql.NullBool   `json:"is_active"`
	IsConfidential sql.NullBool   `json:"is_confidential"`
	CreatedAt      sql.NullTime   `json:"created_at"`
	UpdatedAt      sql.NullTime   `json:"updated_at"`
}

func (q *Queries) GetAllClients(ctx context.Context) ([]GetAllClientsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllClientsRow{}
	for rows.Next() {
		var i GetAllClientsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ClientID,
			pq.Array(&i.RedirectUris),
			&i.WebsiteUrl,
			&i.IsActive,
			&i.IsConfidential,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClientByClientId = `-- name: GetClientByClientId :one
SELECT id, name, description, client_id, client_secret, redirect_uris, website_url, is_active, is_confidential, created_by, created_at, updated_at
FROM clients
WHERE client_id = $1 AND is_active = true
LIMIT 1
`

func (q *Queries) GetClientByClientId(ctx context.Context, clientID string) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClientByClientId, clientID)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ClientID,
		&i.ClientSecret,
		pq.Array(&i.RedirectUris),
		&i.WebsiteUrl,
		&i.IsActive,
		&i.IsConfidential,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getClientById = `-- name: GetClientById :one
SELECT 
    id,
    name,
    description,
    client_id,
    redirect_uris,
    website_url,
    is_active,
    is_confidential,
    created_at,
    updated_at
FROM clients
WHERE id = $1 AND is_active = true
LIMIT 1
`

type GetClientByIdRow struct {
	ID             uuid.UUID      `json:"id"`
	Name           string         `json:"name"`
	Description    sql.NullString `json:"description"`
	ClientID       string         `json:"client_id"`
	RedirectUris   []string       `json:"redirect_uris"`
	WebsiteUrl     sql.NullString `json:"website_url"`
	IsActive       sql.NullBool   `json:"is_active"`
	IsConfidential sql.NullBool   `json:"is_confidential"`
	CreatedAt      sql.NullTime   `json:"created_at"`
	UpdatedAt      sql.NullTime   `json:"updated_at"`
}

func (q *Queries) GetClientById(ctx context.Context, id uuid.UUID) (GetClientByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getClientById, id)
	var i GetClientByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ClientID,
		pq.Array(&i.RedirectUris),
		&i.WebsiteUrl,
		&i.IsActive,
		&i.IsConfidential,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const regenerateClientSecret = `-- name: RegenerateClientSecret :one
UPDATE clients
SET 
    client_secret = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND is_active = true
RETURNING id, name, description, client_id, client_secret, redirect_uris, website_url, is_active, is_confidential, created_by, created_at, updated_at
`

type RegenerateClientSecretParams struct {
	ID           uuid.UUID `json:"id"`
	ClientSecret string    `json:"client_secret"`
}

func (q *Queries) RegenerateClientSecret(ctx context.Context, arg RegenerateClientSecretParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, regenerateClientSecret, arg.ID, arg.ClientSecret)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ClientID,
		&i.ClientSecret,
		pq.Array(&i.RedirectUris),
		&i.WebsiteUrl,
		&i.IsActive,
		&i.IsConfidential,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const regenerateClientSecretByClientId = `-- name: RegenerateClientSecretByClientId :one
UPDATE clients
SET 
    client_secret = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE client_id = $1 AND is_active = true
RETURNING id, name, description, client_id, client_secret, redirect_uris, website_url, is_active, is_confidential, created_by, created_at, updated_at
`

type RegenerateClientSecretByClientIdParams struct {
	ClientID     string `json:"client_id"`
	ClientSecret string `json:"client_secret"`
}

func (q *Queries) RegenerateClientSecretByClientId(ctx context.Context, arg RegenerateClientSecretByClientIdParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, regenerateClientSecretByClientId, arg.ClientID, arg.ClientSecret)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ClientID,
		&i.ClientSecret,
		pq.Array(&i.RedirectUris),
		&i.WebsiteUrl,
		&i.IsActive,
		&i.IsConfidential,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateClient = `-- name: UpdateClient :one
UPDATE clients
SET 
    name = $2,
    description = $3,
    redirect_uris = $4,
    website_url = $5,
    is_confidential = $6,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND is_active = true
RETURNING 
    id,
    name,
    description,
    client_id,
    redirect_uris,
    website_url,
    is_active,
    is_confidential,
    created_at,
    updated_at
`

type UpdateClientParams struct {
	ID             uuid.UUID      `json:"id"`
	Name           string         `json:"name"`
	Description    sql.NullString `json:"description"`
	RedirectUris   []string       `json:"redirect_uris"`
	WebsiteUrl     sql.NullString `json:"website_url"`
	IsConfidential sql.NullBool   `json:"is_confidential"`
}

type UpdateClientRow struct {
	ID             uuid.UUID      `json:"id"`
	Name           string         `json:"name"`
	Description    sql.NullString `json:"description"`
	ClientID       string         `json:"client_id"`
	RedirectUris   []string       `json:"redirect_uris"`
	WebsiteUrl     sql.NullString `json:"website_url"`
	IsActive       sql.NullBool   `json:"is_active"`
	IsConfidential sql.NullBool   `json:"is_confidential"`
	CreatedAt      sql.NullTime   `json:"created_at"`
	UpdatedAt      sql.NullTime   `json:"updated_at"`
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) (UpdateClientRow, error) {
	row := q.db.QueryRowContext(ctx, updateClient,
		arg.ID,
		arg.Name,
		arg.Description,
		pq.Array(arg.RedirectUris),
		arg.WebsiteUrl,
		arg.IsConfidential,
	)
	var i UpdateClientRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ClientID,
		pq.Array(&i.RedirectUris),
		&i.WebsiteUrl,
		&i.IsActive,
		&i.IsConfidential,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
